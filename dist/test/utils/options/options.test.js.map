{"version":3,"file":"options.test.js","sourceRoot":"","sources":["../../../../src/test/utils/options/options.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger, Options, ParameterType, ParameterScope } from '../../../lib/utils';\nimport { deepStrictEqual as equal, throws } from 'assert';\n\ndescribe('Options', () => {\n    const logger = new Logger();\n    const options = new Options(logger);\n    options.addDefaultDeclarations();\n\n    it('Errors on duplicate declarations', () => {\n        logger.resetErrors();\n        options.addDeclaration({\n            name: 'help',\n            help: '',\n            type: ParameterType.Boolean\n        });\n        equal(logger.hasErrors(), true);\n    });\n\n    it('Does not error if the same declaration is registered twice', () => {\n        logger.resetErrors();\n        const declaration = { name: 'test-declaration', help: '' };\n        options.addDeclaration(declaration);\n        options.addDeclaration(declaration);\n        equal(logger.hasErrors(), false);\n        options.removeDeclarationByName(declaration.name);\n    });\n\n    it('Supports removing a declaration by name', () => {\n        options.addDeclaration({ name: 'not-an-option', help: '' });\n        options.removeDeclarationByName('not-an-option');\n        equal(options.getDeclaration('not-an-option'), undefined);\n    });\n\n    it('Also removes the declaration under its short name', () => {\n        options.addDeclaration({ name: 'not-an-option', help: '', short: '#' });\n        options.removeDeclarationByName('not-an-option');\n        equal(options.getDeclaration('#'), undefined);\n    });\n\n    it('Ignores removal of non-existent declarations', () => {\n        options.removeDeclarationByName('not-an-option');\n        equal(options.getDeclaration('not-an-option'), undefined);\n    });\n\n    it('Throws on attempt to get an undeclared option', () => {\n        throws(() => options.getValue('does-not-exist'));\n    });\n\n    it('Does not allow fetching compiler options through getValue', () => {\n        throws(() => options.getValue('target'));\n    });\n\n    it('Errors if converting a set value errors', () => {\n        throws(() => options.setValue('mode', 'nonsense').unwrap());\n    });\n\n    it('Supports directly getting values', () => {\n        equal(options.getRawValues().toc, []);\n    });\n\n    it('Supports getting by scope', () => {\n        equal(options.getDeclarationsByScope(ParameterScope.TypeDoc).length !== 0, true);\n    });\n});\n"]}