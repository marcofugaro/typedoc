{"version":3,"file":"declaration.test.js","sourceRoot":"","sources":["../../../../src/test/utils/options/declaration.test.ts"],"names":[],"mappings":";;AAAA,wEAAyH;AACzH,mCAAkD;AAClD,8CAA4C;AAE5C,QAAQ,CAAC,oCAAoC,EAAE,GAAG,EAAE;IAChD,MAAM,cAAc,GAAG,CAAC,IAAmB,EAAE,EAAE,CAAC,CAAC;QAC7C,IAAI;QACJ,YAAY,EAAE,IAAI;QAClB,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,EAAE;KACX,CAAsB,CAAC;IAExB,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;QAC3B,wBAAK,CAAC,qBAAO,CAAC,KAAK,EAAE,cAAc,CAAC,2BAAa,CAAC,MAAM,CAAC,CAAC,EAAE,cAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5E,wBAAK,CAAC,qBAAO,CAAC,GAAG,EAAE,cAAc,CAAC,2BAAa,CAAC,MAAM,CAAC,CAAC,EAAE,cAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACxE,wBAAK,CAAC,qBAAO,CAAC,GAAG,EAAE,cAAc,CAAC,2BAAa,CAAC,MAAM,CAAC,CAAC,EAAE,cAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;QAC3B,wBAAK,CAAC,qBAAO,CAAC,KAAK,EAAE,cAAc,CAAC,2BAAa,CAAC,MAAM,CAAC,CAAC,EAAE,cAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;QAC9E,wBAAK,CAAC,qBAAO,CAAC,GAAG,EAAE,cAAc,CAAC,2BAAa,CAAC,MAAM,CAAC,CAAC,EAAE,cAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;QAC5E,wBAAK,CAAC,qBAAO,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,cAAc,CAAC,2BAAa,CAAC,MAAM,CAAC,CAAC,EAAE,cAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;QACnF,wBAAK,CAAC,qBAAO,CAAC,IAAI,EAAE,cAAc,CAAC,2BAAa,CAAC,MAAM,CAAC,CAAC,EAAE,cAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1E,wBAAK,CAAC,qBAAO,CAAC,KAAK,CAAC,EAAE,cAAc,CAAC,2BAAa,CAAC,MAAM,CAAC,CAAC,EAAE,cAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAChF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE,GAAG,EAAE;QAC5B,wBAAK,CAAC,qBAAO,CAAC,GAAG,EAAE,cAAc,CAAC,2BAAa,CAAC,OAAO,CAAC,CAAC,EAAE,cAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;QAC5E,wBAAK,CAAC,qBAAO,CAAC,CAAC,CAAC,CAAC,EAAE,cAAc,CAAC,2BAAa,CAAC,OAAO,CAAC,CAAC,EAAE,cAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;QAC5E,wBAAK,CAAC,qBAAO,CAAC,KAAK,EAAE,cAAc,CAAC,2BAAa,CAAC,OAAO,CAAC,CAAC,EAAE,cAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IACnF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAC1B,wBAAK,CAAC,qBAAO,CAAC,MAAM,EAAE,cAAc,CAAC,2BAAa,CAAC,KAAK,CAAC,CAAC,EAAE,cAAM,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;QACpF,wBAAK,CAAC,qBAAO,CAAC,CAAC,MAAM,CAAC,EAAE,cAAc,CAAC,2BAAa,CAAC,KAAK,CAAC,CAAC,EAAE,cAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACnF,wBAAK,CAAC,qBAAO,CAAC,IAAI,EAAE,cAAc,CAAC,2BAAa,CAAC,KAAK,CAAC,CAAC,EAAE,cAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;QAChC,MAAM,WAAW,GAAiC;YAC9C,IAAI,EAAE,EAAE;YACR,IAAI,EAAE,EAAE;YACR,IAAI,EAAE,2BAAa,CAAC,GAAG;YACvB,GAAG,EAAE;gBACD,CAAC,EAAE,CAAC;gBACJ,CAAC,EAAE,CAAC;aACP;YACD,YAAY,EAAE,CAAC;SAClB,CAAC;QACF,wBAAK,CAAC,qBAAO,CAAC,GAAG,EAAE,WAAW,CAAC,EAAE,cAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/C,wBAAK,CAAC,qBAAO,CAAC,GAAG,EAAE,WAAW,CAAC,EAAE,cAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/C,wBAAK,CAAC,qBAAO,CAAC,CAAC,EAAE,WAAW,CAAC,EAAE,cAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAC3C,MAAM,WAAW,GAAiC;YAC9C,IAAI,EAAE,EAAE;YACR,IAAI,EAAE,EAAE;YACR,IAAI,EAAE,2BAAa,CAAC,GAAG;YACvB,GAAG,EAAE,IAAI,GAAG,CAAC;gBACT,CAAC,GAAG,EAAE,CAAC,CAAC;gBACR,CAAC,GAAG,EAAE,CAAC,CAAC;aACX,CAAC;YACF,YAAY,EAAE,CAAC;SAClB,CAAC;QACF,wBAAK,CAAC,qBAAO,CAAC,GAAG,EAAE,WAAW,CAAC,EAAE,cAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/C,wBAAK,CAAC,qBAAO,CAAC,GAAG,EAAE,WAAW,CAAC,EAAE,cAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/C,wBAAK,CAAC,qBAAO,CAAC,CAAC,EAAE,WAAW,CAAC,EAAE,cAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAChD,MAAM,WAAW,GAAiC;YAC9C,IAAI,EAAE,EAAE;YACR,IAAI,EAAE,EAAE;YACR,IAAI,EAAE,2BAAa,CAAC,GAAG;YACvB,GAAG,EAAE,EAAE;YACP,YAAY,EAAE,CAAC;YACf,QAAQ,EAAE,YAAY;SACzB,CAAC;QACF,wBAAK,CAAC,qBAAO,CAAC,GAAG,EAAE,WAAW,CAAC,EAAE,cAAM,CAAC,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;IACvE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;QACzD,MAAM,WAAW,GAAiC;YAC9C,IAAI,EAAE,MAAM;YACZ,IAAI,EAAE,EAAE;YACR,IAAI,EAAE,2BAAa,CAAC,GAAG;YACvB,GAAG,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;YAClC,YAAY,EAAE,CAAC;SAClB,CAAC;QACF,wBAAK,CAAC,qBAAO,CAAC,GAAG,EAAE,WAAW,CAAC,EAAE,cAAM,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC,CAAC;IAC7E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACrD,IAAK,IAAa;QAAlB,WAAK,IAAI;YAAG,yBAAC,CAAA;YAAE,yBAAC,CAAA;QAAC,CAAC,EAAb,IAAI,KAAJ,IAAI,QAAS;QAClB,MAAM,WAAW,GAAG;YAChB,IAAI,EAAE,MAAM;YACZ,IAAI,EAAE,EAAE;YACR,IAAI,EAAE,2BAAa,CAAC,GAAG;YACvB,GAAG,EAAE,IAAI;YACT,YAAY,EAAE,IAAI,CAAC,CAAC;SACd,CAAC;QACX,wBAAK,CAAC,qBAAO,CAAC,GAAG,EAAE,WAAW,CAAC,EAAE,cAAM,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC,CAAC;IAC7E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE,GAAG,EAAE;QAC5B,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC;QACtB,wBAAK,CAAC,qBAAO,CAAC,IAAI,EAAE,cAAc,CAAC,2BAAa,CAAC,KAAK,CAAC,CAAC,EAAE,cAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/E,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { convert, DeclarationOption, ParameterType, MapDeclarationOption } from '../../../lib/utils/options/declaration';\nimport { deepStrictEqual as equal } from 'assert';\nimport { Result } from '../../../lib/utils';\n\ndescribe('Options - Default convert function', () => {\n    const optionWithType = (type: ParameterType) => ({\n        type,\n        defaultValue: null,\n        name: 'test',\n        help: ''\n    }) as DeclarationOption;\n\n    it('Converts to numbers', () => {\n        equal(convert('123', optionWithType(ParameterType.Number)), Result.Ok(123));\n        equal(convert('a', optionWithType(ParameterType.Number)), Result.Ok(0));\n        equal(convert(NaN, optionWithType(ParameterType.Number)), Result.Ok(0));\n    });\n\n    it('Converts to strings', () => {\n        equal(convert('123', optionWithType(ParameterType.String)), Result.Ok('123'));\n        equal(convert(123, optionWithType(ParameterType.String)), Result.Ok('123'));\n        equal(convert(['1', '2'], optionWithType(ParameterType.String)), Result.Ok('1,2'));\n        equal(convert(null, optionWithType(ParameterType.String)), Result.Ok(''));\n        equal(convert(void 0, optionWithType(ParameterType.String)), Result.Ok(''));\n    });\n\n    it('Converts to booleans', () => {\n        equal(convert('a', optionWithType(ParameterType.Boolean)), Result.Ok(true));\n        equal(convert([1], optionWithType(ParameterType.Boolean)), Result.Ok(true));\n        equal(convert(false, optionWithType(ParameterType.Boolean)), Result.Ok(false));\n    });\n\n    it('Converts to arrays', () => {\n        equal(convert('12,3', optionWithType(ParameterType.Array)), Result.Ok(['12', '3']));\n        equal(convert(['12,3'], optionWithType(ParameterType.Array)), Result.Ok(['12,3']));\n        equal(convert(true, optionWithType(ParameterType.Array)), Result.Ok([]));\n    });\n\n    it('Converts to mapped types', () => {\n        const declaration: MapDeclarationOption<number> = {\n            name: '',\n            help: '',\n            type: ParameterType.Map,\n            map: {\n                a: 1,\n                b: 2\n            },\n            defaultValue: 1\n        };\n        equal(convert('a', declaration), Result.Ok(1));\n        equal(convert('b', declaration), Result.Ok(2));\n        equal(convert(2, declaration), Result.Ok(2));\n    });\n\n    it('Converts to mapped types with a map', () => {\n        const declaration: MapDeclarationOption<number> = {\n            name: '',\n            help: '',\n            type: ParameterType.Map,\n            map: new Map([\n                ['a', 1],\n                ['b', 2]\n            ]),\n            defaultValue: 1\n        };\n        equal(convert('a', declaration), Result.Ok(1));\n        equal(convert('b', declaration), Result.Ok(2));\n        equal(convert(2, declaration), Result.Ok(2));\n    });\n\n    it('Uses the mapError if provided for errors', () => {\n        const declaration: MapDeclarationOption<number> = {\n            name: '',\n            help: '',\n            type: ParameterType.Map,\n            map: {},\n            defaultValue: 1,\n            mapError: 'Test error'\n        };\n        equal(convert('a', declaration), Result.Err(declaration.mapError));\n    });\n\n    it('Generates a nice error if no mapError is provided', () => {\n        const declaration: MapDeclarationOption<number> = {\n            name: 'test',\n            help: '',\n            type: ParameterType.Map,\n            map: new Map([['a', 1], ['b', 2]]),\n            defaultValue: 1\n        };\n        equal(convert('c', declaration), Result.Err('test must be one of a, b'));\n    });\n\n    it('Correctly handles enum types in the map error', () => {\n        enum Enum { a, b }\n        const declaration = {\n            name: 'test',\n            help: '',\n            type: ParameterType.Map,\n            map: Enum,\n            defaultValue: Enum.a\n        } as const;\n        equal(convert('c', declaration), Result.Err('test must be one of a, b'));\n    });\n\n    it('Passes through mixed', () => {\n        const data = Symbol();\n        equal(convert(data, optionWithType(ParameterType.Mixed)), Result.Ok(data));\n    });\n});\n"]}