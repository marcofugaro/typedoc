{"version":3,"file":"arguments.test.js","sourceRoot":"","sources":["../../../../../src/test/utils/options/readers/arguments.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepStrictEqual as equal } from 'assert';\n\nimport { Options, Logger } from '../../../../lib/utils';\nimport { ArgumentsReader } from '../../../../lib/utils/options/readers';\nimport { ParameterType } from '../../../../lib/utils/options';\n\ndescribe('Options - ArgumentsReader', () => {\n    const options = new Options(new Logger());\n    options.addDefaultDeclarations();\n    options.addDeclaration({\n        name: 'numOption',\n        short: 'no',\n        help: '',\n        type: ParameterType.Number\n    });\n    options.addDeclaration({\n        name: 'bool',\n        help: '',\n        type: ParameterType.Boolean\n    });\n    options.addDeclaration({\n        name: 'map',\n        help: '',\n        type: ParameterType.Map,\n        map: {\n            item: { a: true },\n            other: 'blah'\n        },\n        defaultValue: 'blah'\n    });\n    options.addDeclaration({\n        name: 'mixed',\n        help: '',\n        type: ParameterType.Mixed\n    });\n\n    function test(name: string, args: string[], cb: () => void) {\n        it(name, () => {\n            const reader = new ArgumentsReader(1, args);\n            options.reset();\n            options.addReader(reader);\n            options.read(new Logger());\n            cb();\n            options.removeReaderByName(reader.name);\n        });\n    }\n\n    test('Puts arguments with no flag into inputFiles', ['foo', 'bar'], () => {\n        equal(options.getValue('inputFiles'), ['foo', 'bar']);\n    });\n\n    test('Works with string options', ['--out', 'outDir'], () => {\n        equal(options.getValue('out'), 'outDir');\n    });\n\n    test('Works with number options', ['-no', '123'], () => {\n        equal(options.getValue('numOption'), 123);\n    });\n\n    test('Works with boolean options', ['--bool'], () => {\n        equal(options.getValue('bool'), true);\n    });\n\n    test('Allows setting boolean options with a value', ['--bool', 'TrUE'], () => {\n        equal(options.getValue('bool'), true);\n        equal(options.getValue('inputFiles'), []);\n    });\n\n    test('Allows setting boolean options to false with a value', ['--bool', 'FALse'], () => {\n        equal(options.getValue('bool'), false);\n        equal(options.getValue('inputFiles'), []);\n    });\n\n    test('Bool options do not improperly consume arguments', ['--bool', 'foo'], () => {\n        equal(options.getValue('bool'), true);\n        equal(options.getValue('inputFiles'), ['foo']);\n    });\n\n    test('Works with map options', ['--map', 'item'], () => {\n        equal(options.getValue('map'), { a: true });\n    });\n\n    test('Works with mixed options', ['--mixed', 'word'], () => {\n        equal(options.getValue('mixed'), 'word');\n    });\n\n    test('Works with array options', ['--exclude', 'a'], () => {\n        equal(options.getValue('exclude'), ['a']);\n    });\n\n    test('Splits array options (backward compatibility)', ['--exclude', 'a,b'], () => {\n        equal(options.getValue('exclude'), ['a', 'b']);\n    });\n\n    test('Works with array options passed multiple times', ['--exclude', 'a', '--exclude', 'b'], () => {\n        equal(options.getValue('exclude'), ['a', 'b']);\n    });\n\n    it('Errors if given an unknown option', () => {\n        let check = false;\n        class TestLogger extends Logger {\n            error(msg: string) {\n                equal(msg, 'Unknown option: --badOption');\n                check = true;\n            }\n        }\n        const reader = new ArgumentsReader(1, ['--badOption']);\n        options.reset();\n        options.addReader(reader);\n        options.read(new TestLogger());\n        options.removeReaderByName(reader.name);\n        equal(check, true, 'Reader did not report an error.');\n    });\n});\n"]}