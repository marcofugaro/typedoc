{"version":3,"file":"typedoc.test.js","sourceRoot":"","sources":["../../../../../src/test/utils/options/readers/typedoc.test.ts"],"names":[],"mappings":";;AAAA,+BAA4B;AAC5B,mCAAkD;AAElD,mEAAsE;AACtE,iDAAuE;AAEvE,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACrC,MAAM,OAAO,GAAG,IAAI,eAAO,CAAC,IAAI,cAAM,EAAE,CAAC,CAAC;IAC1C,OAAO,CAAC,sBAAsB,EAAE,CAAC;IACjC,OAAO,CAAC,SAAS,CAAC,IAAI,uBAAa,EAAE,CAAC,CAAC;IAEvC,SAAS,IAAI,CAAC,IAAY,EAAE,KAAa,EAAE,EAAc;QACrD,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE;YACV,OAAO,CAAC,KAAK,EAAE,CAAC;YAChB,OAAO,CAAC,QAAQ,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,MAAM,EAAE,CAAC;YAC5C,OAAO,CAAC,IAAI,CAAC,IAAI,qBAAa,EAAE,CAAC,CAAC;YAClC,EAAE,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACP,CAAC;IAED,IAAI,CAAC,4BAA4B,EAAE,WAAI,CAAC,SAAS,EAAE,eAAe,CAAC,EAAE,GAAG,EAAE;QACtE,wBAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,8BAA8B,EAAE,WAAI,CAAC,SAAS,EAAE,gBAAgB,CAAC,EAAE,GAAG,EAAE;QACzE,wBAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,SAAS,SAAS,CAAC,IAAY,EAAE,IAAY;QACzC,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE;YACV,OAAO,CAAC,KAAK,EAAE,CAAC;YAChB,OAAO,CAAC,QAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC;YAC3C,MAAM,MAAM,GAAG,IAAI,cAAM,EAAE,CAAC;YAC5B,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACrB,wBAAK,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,qBAAqB,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACP,CAAC;IAED,SAAS,CAAC,oCAAoC,EAAE,WAAI,CAAC,SAAS,EAAE,6BAA6B,CAAC,CAAC,CAAC;IAChG,SAAS,CAAC,+BAA+B,EAAE,WAAI,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC,CAAC;IACjF,SAAS,CAAC,iCAAiC,EAAE,WAAI,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC,CAAC;IAEnF,EAAE,CAAC,oEAAoE,EAAE,GAAG,EAAE;QAC1E,MAAM,OAAO,GAAG,IAAI,MAAM,YAAa,SAAQ,eAAO;YAClD,SAAS;gBACL,OAAO,IAAI,CAAC;YAChB,CAAC;SACJ,CAAC,IAAI,cAAM,EAAE,CAAC,CAAC;QAEhB,OAAO,CAAC,sBAAsB,EAAE,CAAC;QACjC,OAAO,CAAC,SAAS,CAAC,IAAI,uBAAa,EAAE,CAAC,CAAC;QACvC,MAAM,MAAM,GAAG,IAAI,cAAM,EAAE,CAAC;QAC5B,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACrB,wBAAK,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { join } from 'path';\nimport { deepStrictEqual as equal } from 'assert';\n\nimport { TypeDocReader } from '../../../../lib/utils/options/readers';\nimport { Logger, Options, ConsoleLogger } from '../../../../lib/utils';\n\ndescribe('Options - TypeDocReader', () => {\n    const options = new Options(new Logger());\n    options.addDefaultDeclarations();\n    options.addReader(new TypeDocReader());\n\n    function test(name: string, input: string, cb: () => void) {\n        it(name, () => {\n            options.reset();\n            options.setValue('options', input).unwrap();\n            options.read(new ConsoleLogger());\n            cb();\n        });\n    }\n\n    test('Converts src to inputFiles', join(__dirname, 'data/src.json'), () => {\n        equal(options.getValue('inputFiles'), ['a']);\n    });\n\n    test('Preserves splitting behavior', join(__dirname, 'data/src2.json'), () => {\n        equal(options.getValue('inputFiles'), ['a']);\n    });\n\n    function testError(name: string, file: string) {\n        it(name, () => {\n            options.reset();\n            options.setValue('options', file).unwrap();\n            const logger = new Logger();\n            options.read(logger);\n            equal(logger.hasErrors(), true, 'No error was logged');\n        });\n    }\n\n    testError('Errors if the file cannot be found', join(__dirname, 'data/non-existent-file.json'));\n    testError('Errors if the data is invalid', join(__dirname, 'data/invalid.json'));\n    testError('Errors if any set option errors', join(__dirname, 'data/unknown.json'));\n\n    it('Does not error if the option file cannot be found but was not set.', () => {\n        const options = new class LyingOptions extends Options {\n            isDefault() {\n                return true;\n            }\n        }(new Logger());\n\n        options.addDefaultDeclarations();\n        options.addReader(new TypeDocReader());\n        const logger = new Logger();\n        options.read(logger);\n        equal(logger.hasErrors(), false);\n    });\n});\n"]}