{"version":3,"file":"tsconfig.test.js","sourceRoot":"","sources":["../../../../../src/test/utils/options/readers/tsconfig.test.ts"],"names":[],"mappings":";;AAAA,+BAA4B;AAC5B,mCAAkD;AAElD,mEAAuE;AACvE,iDAAwD;AACxD,2CAA0C;AAE1C,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;IACtC,MAAM,OAAO,GAAG,IAAI,eAAO,CAAC,IAAI,cAAM,EAAE,CAAC,CAAC;IAC1C,OAAO,CAAC,sBAAsB,EAAE,CAAC;IACjC,OAAO,CAAC,SAAS,CAAC,IAAI,wBAAc,EAAE,CAAC,CAAC;IAExC,SAAS,SAAS,CAAC,IAAY,EAAE,IAAY;QACzC,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE;YACV,OAAO,CAAC,KAAK,EAAE,CAAC;YAChB,OAAO,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC;YAC5C,MAAM,MAAM,GAAG,IAAI,cAAM,EAAE,CAAC;YAC5B,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACrB,wBAAK,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,qBAAqB,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACP,CAAC;IAED,SAAS,CAAC,oCAAoC,EAAE,WAAI,CAAC,SAAS,EAAE,6BAA6B,CAAC,CAAC,CAAC;IAChG,SAAS,CAAC,+BAA+B,EAAE,WAAI,CAAC,SAAS,EAAE,4BAA4B,CAAC,CAAC,CAAC;IAC1F,SAAS,CAAC,iCAAiC,EAAE,WAAI,CAAC,SAAS,EAAE,4BAA4B,CAAC,CAAC,CAAC;IAC5F,SAAS,CAAC,8CAA8C,EAAE,WAAI,CAAC,SAAS,EAAE,iCAAiC,CAAC,CAAC,CAAC;IAE9G,EAAE,CAAC,oEAAoE,EAAE,GAAG,EAAE;QAC1E,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,YAAa,SAAQ,eAAO;YACnD,SAAS;gBACL,OAAO,IAAI,CAAC;YAChB,CAAC;SACJ,CAAC,CAAC,IAAI,cAAM,EAAE,CAAC,CAAC;QACjB,OAAO,CAAC,sBAAsB,EAAE,CAAC;QAEjC,OAAO,CAAC,QAAQ,CAAC,UAAU,EAAE,WAAI,CAAC,SAAS,EAAE,0BAA0B,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;QACnF,MAAM,MAAM,GAAG,IAAI,cAAM,EAAE,CAAC;QAC5B,OAAO,CAAC,SAAS,CAAC,IAAI,wBAAc,EAAE,CAAC,CAAC;QACxC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACrB,wBAAK,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QAC/C,OAAO,CAAC,KAAK,EAAE,CAAC;QAChB,OAAO,CAAC,QAAQ,CAAC,SAAS,EAAE,WAAI,CAAC,SAAS,EAAE,0BAA0B,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;QAClF,MAAM,MAAM,GAAG,IAAI,cAAM,EAAE,CAAC;QAC5B,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACrB,wBAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;QACtC,wBAAK,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC,MAAM,EAAE,yBAAY,CAAC,MAAM,CAAC,CAAC;IACpE,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { join } from 'path';\nimport { deepStrictEqual as equal } from 'assert';\n\nimport { TSConfigReader } from '../../../../lib/utils/options/readers';\nimport { Logger, Options } from '../../../../lib/utils';\nimport { ScriptTarget } from 'typescript';\n\ndescribe('Options - TSConfigReader', () => {\n    const options = new Options(new Logger());\n    options.addDefaultDeclarations();\n    options.addReader(new TSConfigReader());\n\n    function testError(name: string, file: string) {\n        it(name, () => {\n            options.reset();\n            options.setValue('tsconfig', file).unwrap();\n            const logger = new Logger();\n            options.read(logger);\n            equal(logger.hasErrors(), true, 'No error was logged');\n        });\n    }\n\n    testError('Errors if the file cannot be found', join(__dirname, 'data/non-existent-file.json'));\n    testError('Errors if the data is invalid', join(__dirname, 'data/invalid.tsconfig.json'));\n    testError('Errors if any set option errors', join(__dirname, 'data/unknown.tsconfig.json'));\n    testError('Errors if tsconfig tries to set options file', join(__dirname, 'data/options-file.tsconfig.json'));\n\n    it('Does not error if the option file cannot be found but was not set.', () => {\n        const options = new (class LyingOptions extends Options {\n            isDefault() {\n                return true;\n            }\n        })(new Logger());\n        options.addDefaultDeclarations();\n\n        options.setValue('tsconfig', join(__dirname, 'data/does_not_exist.json')).unwrap();\n        const logger = new Logger();\n        options.addReader(new TSConfigReader());\n        options.read(logger);\n        equal(logger.hasErrors(), false);\n    });\n\n    it('Also reads files according to --project', () => {\n        options.reset();\n        options.setValue('project', join(__dirname, 'data/valid.tsconfig.json')).unwrap();\n        const logger = new Logger();\n        options.read(logger);\n        equal(options.getValue('help'), true);\n        equal(options.getCompilerOptions().target, ScriptTarget.ESNext);\n    });\n});\n"]}