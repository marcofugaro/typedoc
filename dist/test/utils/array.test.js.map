{"version":3,"file":"array.test.js","sourceRoot":"","sources":["../../../src/test/utils/array.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepStrictEqual as equal, doesNotThrow } from 'assert';\nimport {\n    binaryFindPartition,\n    insertPrioritySorted,\n    removeIfPresent\n} from '../../lib/utils/array';\n\ndescribe('Array utils', () => {\n    describe('insertPrioritySorted', () => {\n        const item1 = { priority: 1 };\n        const item2 = { priority: 2 };\n        const item3 = { priority: 3 };\n        const item4 = { priority: 4 };\n\n        it('works with an empty array', () => {\n            equal(insertPrioritySorted([], item1), [item1]);\n        });\n\n        it('inserts at the start', () => {\n            equal(insertPrioritySorted([item2], item1), [item1, item2]);\n        });\n\n        it('inserts in the middle', () => {\n            equal(insertPrioritySorted([item1, item3], item2), [item1, item2, item3]);\n        });\n\n        it('inserts at the end', () => {\n            equal(insertPrioritySorted([item2, item3], item4), [item2, item3, item4]);\n        });\n\n        it('inserts new items first', () => {\n            const item0 = { priority: 1, first: true };\n            equal(insertPrioritySorted([item1], item0), [item0, item1]);\n        });\n    });\n\n    describe('binaryFindPartition', () => {\n        const always = () => true;\n\n        it('works with empty array', () => {\n            equal(binaryFindPartition([], always), -1);\n        });\n\n        it('works with one item', () => {\n            equal(binaryFindPartition([1], always), 0);\n        });\n\n        it('works with more items', () => {\n            equal(binaryFindPartition([1, 2, 3], n => n > 2), 2);\n            equal(binaryFindPartition([1, 2, 3, 4, 5, 6, 7], n => n > 5), 5);\n        });\n\n        it('works with no partition', () => {\n            equal(binaryFindPartition([1, 2, 3], n => false), -1);\n        });\n\n        it('works with big arrays', () => {\n            const index = 50168;\n            const arr = Array.from<number>({ length: 1e5 })\n                .fill(0, 0, index)\n                .fill(1, index);\n\n            equal(binaryFindPartition(arr, v => v === 1), index);\n        });\n    });\n\n    describe('removeIfPresent', () => {\n        it('Supports a missing array', () => {\n            doesNotThrow(() => removeIfPresent(undefined, true));\n        });\n\n        it('Does not remove items if the item is not in the array', () => {\n            const arr = [1, 2, 3];\n            removeIfPresent(arr, 4);\n            equal(arr, [1, 2, 3]);\n        });\n\n        it('Removes a single item if it is present in the array', () => {\n            const arr = [1, 2, 1];\n            removeIfPresent(arr, 1);\n            equal(arr, [2, 1]);\n        });\n    });\n});\n"]}