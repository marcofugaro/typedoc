{"version":3,"file":"result.test.js","sourceRoot":"","sources":["../../../src/test/utils/result.test.ts"],"names":[],"mappings":";;AAAA,mCAA6C;AAC7C,2CAAyC;AAEzC,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;IACpB,MAAM,QAAQ,GAAG,cAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;IACjC,MAAM,SAAS,GAAG,cAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACtC,MAAM,SAAS,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;IAE1B,EAAE,CAAC,YAAY,EAAE,GAAG,EAAE;QAClB,cAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;QACtC,eAAM,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAE,aAAa,EAAE,GAAG,EAAE;QACpB,cAAK,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,OAAO,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;QACtC,eAAM,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,YAAY,EAAE,GAAG,EAAE;QAClB,QAAQ,CAAC,KAAK,CAAC;YACX,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,cAAK,CAAC,IAAI,EAAE,IAAI,CAAC;YAC7B,GAAG,EAAE,aAAI;SACZ,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,aAAa,EAAE,GAAG,EAAE;QACnB,SAAS,CAAC,KAAK,CAAC;YACZ,EAAE,EAAE,aAAI;YACR,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,cAAK,CAAC,IAAI,EAAE,OAAO,CAAC;SACpC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;QACf,cAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;QACxB,cAAK,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,SAAS,EAAE,EAAE,OAAO,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,UAAU,EAAE,GAAG,EAAE;QAChB,cAAK,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;QACxB,cAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACjC,cAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,SAAS,CAAC,CAAC;QACtC,cAAK,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,aAAa,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { equal, fail, throws } from 'assert';\nimport { Result } from '../../lib/utils';\n\ndescribe('Result', () => {\n    const okResult = Result.Ok('ok');\n    const errResult = Result.Err('error');\n    const returnOne = () => 1;\n\n    it('Unwraps Ok', () => {\n        equal(okResult.unwrap(), 'ok');\n    });\n\n    it('Throws if unwrapping Err as Ok', () => {\n        throws(() => errResult.unwrap());\n    });\n\n    it ('Unwraps Err', () => {\n        equal(errResult.unwrapErr(), 'error');\n    });\n\n    it('Throws if unwrapping Ok as Err', () => {\n        throws(() => okResult.unwrapErr());\n    });\n\n    it('Matches Ok', () => {\n        okResult.match({\n            ok: data => equal(data, 'ok'),\n            err: fail\n        });\n    });\n\n    it('Matches Err', () => {\n        errResult.match({\n            ok: fail,\n            err: data => equal(data, 'error')\n        });\n    });\n\n    it('Maps Ok', () => {\n        equal(okResult.map(returnOne).unwrap(), 1);\n    });\n\n    it('Maps Ok when Err', () => {\n        equal(errResult.map(returnOne).unwrapErr(), 'error');\n    });\n\n    it('Maps Err', () => {\n        equal(errResult.mapErr(returnOne).unwrapErr(), 1);\n    });\n\n    it('Maps Err when Ok', () => {\n        equal(okResult.mapErr(returnOne).unwrap(), 'ok');\n    });\n\n    it('Has a nice display string', () => {\n        equal(okResult.toString(), '[Ok ok]');\n        equal(errResult.toString(), '[Err error]');\n    });\n});\n"]}