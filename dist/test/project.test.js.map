{"version":3,"file":"project.test.js","sourceRoot":"","sources":["../../src/test/project.test.ts"],"names":[],"mappings":";;AAAA,0BAAyC;AACzC,iCAAkC;AAElC,QAAQ,CAAC,SAAS,EAAE;IAChB,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACjC,IAAI,MAA4B,CAAC;QAEjC,EAAE,CAAC,iBAAiB,EAAE;YAClB,MAAM,GAAG,uBAAmB,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,cAAc,CAAC,CAAC;YACrD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;YACpD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,eAAe,EAAE;YAChB,MAAM,GAAG,uBAAmB,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,cAAc,CAAC,CAAC;YACrD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4BAA4B,EAAE;YAC7B,MAAM,GAAG,uBAAmB,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;YACjD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,cAAc,CAAC,CAAC;YACrD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC;YACxD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kBAAkB,EAAE;YACrB,MAAM,GAAG,uBAAmB,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;YAC5C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,cAAc,CAAC,CAAC;YACrD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC;YACrD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,aAAa,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { splitUnquotedString } from '..';\nimport Assert = require('assert');\n\ndescribe('Project', function() {\n    describe('splitUnquotedString', () => {\n        let result: string[] | undefined;\n\n        it('unquoted string', function() {\n            result = splitUnquotedString('foo.bar', '.');\n            Assert.strictEqual(result.length, 2, 'Wrong length');\n            Assert.strictEqual(result[0], 'foo', 'Wrong split');\n            Assert.strictEqual(result[1], 'bar', 'Wrong split');\n        });\n\n        it('quoted string', function() {\n            result = splitUnquotedString('\"foo.bar\"', '.');\n            Assert.strictEqual(result.length, 1, 'Wrong length');\n            Assert.strictEqual(result[0], '\"foo.bar\"', 'Wrong split');\n        });\n\n        it('quoted start, unquoted end', function() {\n            result = splitUnquotedString('\"foo.d\".bar', '.');\n            Assert.strictEqual(result.length, 2, 'Wrong length');\n            Assert.strictEqual(result[0], '\"foo.d\"', 'Wrong split');\n            Assert.strictEqual(result[1], 'bar', 'Wrong split');\n        });\n\n        it('unmachted quotes', function() {\n          result = splitUnquotedString('\"foo.d', '.');\n          Assert.strictEqual(result.length, 2, 'Wrong length');\n          Assert.strictEqual(result[0], '\"foo', 'Wrong split');\n          Assert.strictEqual(result[1], 'd', 'Wrong split');\n        });\n    });\n});\n"]}